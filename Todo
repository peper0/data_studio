TODO:
- args need reaction żeby obejmowało też defaulty (trzeba robić tak samo jak rewrap)
- graf z notifierów:
  - labele na nodach
  - zepsute przesuwanie
  - click event (także prawy)
  - global mouse event
  - przepakowanie najpierw mouse eventów do osobnego dicta (optymalizacja)
  - autopozycjonowanie
  - descriptiony po najechaniu na noda
- podświetlanie krawędzi i sąsiadów po zaznaczeniu
- testy do proxy
- generowanie grafu
- doce
  - używanie prostych zmiennych
  - okienka, wykresy, obrazki
- obsługa błędów przy pierwszym wywołaniu (ignorować tylko błędy z argumentów)

- plugin
- await z konsoli
- ujednolicić wiązanie var z kontrolkami
- persistent do imshow (i trzymamy wtedy jeden updater per okienko)
- object explorer - tree do oglądania stanu obiektu (używa dir() do pobrania dzieci); pluginy do ładnego printowania :)
- memo do jednej zmiennej (jak jest tekstowa i długa)
- jak możnaby zrobić coś takiego, że jak nie widzimy Axes, to nie wykonujemy obliczeń dla niej (tzn. nie odświeżamy
stanów)? coś z lazy evaluation, ale wtedy nie wiemy jak dalego propagować notify observers (póki co i tak propagujemy do końca nie patrząc na to czy coś się faktycznie zmieniło)
- zrobić, żeby eventy z QT miały priorytet (bardziej responsywne gui)
- doc w restructured textcie i przykłady w pydoc


= nowy interfejs:
== widgety
- przestrzenie na okienkach
- dokowalne
- wyklikiwalne z gui, tworzone automatycznie jak strona pythonowa się do nich odwoła
- zapisywane i odtwarzane
- to co user może wyklikać musi być zapisane i odtworzone (razem z wartościami zmiennych?)
- tworzone automatycznie przy próbie użycia (jeśli bez nazwy, to nie są zapisywane)

== wizualizacje
- funkcje korzystające z widgetów i innych klas w celu zwizualizowania jednego zestawu danych w określony sposób
- robione z poziomu pythona, ale może też w przyszłości z gui
- bezpośrednio nie zapisywane do pliku, ale stan tych obiektów które tworza mogą być zapisane (np. widget plota, ale też kolor linii o podanej nazwie)
- fajnie byłoby, gdyby ten interfejs był na tyle uniwersalny, że możnaby go użyć bezpośrednio z gui (np. prawoklik w zmienną i klik w "tabelka", albo "wykres")
- niektóre widgety umią wyświetlać dużo danych (np. plot) a inne tylko jedną (np. tabelka)
- a czasem chcielibyśmy ręcznie (np. z menu kontekstowego) zmieniać sposób wizualizacji (np. slider/spinbox), a skrypt
  powinien tylko wywalić liczbę na gui


=== przykłady
vis.table(name, array, show_slicer, sortable, show_filter)
vis.slider(name, value, range, step, show_spin_box, ..., place)
vis.checkbox(name, value, place)
vis.graph(name, nodes, ...)
vis.image(name, image, extent, alpha, ..., place)
vis.textbox(name, value, multiline, readonly)
vis.image_input(name, image)  # płótno do malowania obrazu
vis.plot(name, array, xarry, yarray, color, linewidth, ...)
vis.histogram(name, array, ..., place)
vis.scatter(name, array, ..., place)
vis.roi2d(name, var, place, ...)
vis.gl_image(place: GlWidget, image, extent_or_corners, shader...?)

vis.plt_axes(name).plot...(...)
vis.pg_param(place, name, var, type, ...)



= pyqtgraph
- wartości z parametertree jako observable (można z tego zrobić coś jak QtPropertyVar z setem i getem; do tego by się przydał binder jeśli ktoś chce wyświetlić istniejącego vara)
- plotowanie/wyświetlanie observabli
- rekursywny zapis/odczyt stanu
- graf z networkx
- jak plotować
- jak wyświetlać dowolne figury (gdzieś widziałem takiego screenshota)
- jak wyświetlać wiele obrazków w dowolnych miejscach
- jak użyć tego jako płótno do GLa (chciałbym coś takiego, że podaję callbacks typu "drawgl" wołany z wielkością płotna i jakimś kontekstem przy każdym update (również z powodu resizea))


= logger
- drzewko kategorii do loggera z możliwością wyboru poziomu logowania dla każdego
- czarne litery na loggerze

= graf
- xdot
- networkx umie coś rysować w matplotlibie, ale to dość ubogi backend (chyba nie ma żadnej interakcji)
- export do gephi (wydaje się być wypasionym opensourcowym frameworkiem, ale nie ma inegrachi z pythonem)
- pyqtgraph
- igraph jest fajny i pythonowy, ale nie umie sam z siebie matplotliba (używa cairo)
- https://stackoverflow.com/questions/5759878/is-there-an-interactive-graphing-library-for-python

= slider
- kasowanie rysowaczy nie działa jak jest reactive w reactive
- może jednak slider zamiast scroll bara skoro jest spinbox?
- zamykanie widgetów powinno (może) je wywalać z widgetów
- tabelka do arrayów numpyowych (z możliwością wpisania wyrażenia, które ma się ewaluować do tabelki z max 2 wymiarami)

= wykres
- pełnojajeczny backend do matplotliba

= tabelka
- zapis geometrii
- ukrywanie/pokazywanie kolumn (+ zapis tego)
- filtrowanie każdej kolumny: lista wartości z checkboxami, regexp, wyrażenie pythonowe (np. 'V>6 or V%2==0')
- sortowanie?
- dokładanie kolumn będących funkcjami pozostałych?

= hierarhia varów:
- Observable: ma pole OBS typu Notifier lub pochodnego (tylko getowalne)
- Wrapper(Observable): forwarduje wszystkie wywołania (wraz z funkcjami wewn.) do OBS.raw
- <Custom>(Wrapper): specjalne forwardery dla różnych metod
- ?AutoWrapper(Observable)

- Notifier: add_observer, notify_observers, keep_reference?, dispose (z implementacją)
- Value(Notifier): property raw, property exception (interfejs)
- SelfContainedValue(Value): get zwraca to co ustawił set
- ProvidedValue(Value): value dostarczone przez osobny interfejs
- CallbackValue(Value): value liczone callbackiem przy każdym pobraniu, być może cacheowane
- CallResult(Value):

== pomysł 3:
- notifier (jako member)
- observable box
  - ma __unwrap__ (raw lepsze)
  - ma __notifier__ - notyfikuje, jeśli ci, którzy użyli __unwrap__ powinni to się przeliczyć jeszcze raz
  - operator @= (przypisanie wartości w środku)
  - wbudowane operatory niemodyfikujące z @reactive (len, contains, getitem, arithmetic (left, right, unary, bez inplace), comparisons, enter/exit, )
  - wbudowane operatory modyfikujące (inplace i odpakowują parametry (@unwrap_args) i wołają notifiera
  - hash jest wywalony
  (niektóre wołają notifiery); te które modyfikują
- callable wrapper
  - ma __unwrap__ i notifier__ (może być fakeowy)
  - __call__ reaktywny (zawoła się ponownie jak zmienią się argumenty lub funkcja do zawołania, bo ta funkcja to też argument do __call__)
- wrapper
  - ma __unwrap__ i __notifier__ (może być fakeowy, jeśli owrapowany obiekt się nie zmienia)
  - ma zaimplementowane (lub ręcznie zforwarfdowane) różne metody
- obiekt obserwowalny (natywny lub wrapper):
  - pure metody powinny zwracać obiekty obserwowalne (same śledzące zmiany obiektu) i być reaktywne (np. ObservableDict.get(var))
  - settery powinny być reaktywne (działają tak długo jak ktoś trzyma wartość zwracaną z nich)
  - metody wykonujące jednorazową akcję nie powinny być reaktywne
  - tylko metody reaktywne powinny unwrapować argumenty... inaczej nie można wsadzić vara do kolekcji
  - pozostałe metody zależnie od przypadku
    - iter na kolekcjach powinien zwracać zwykły obiekt (oprócz tego można rozważyć jakiś specjalny iter)
    - pop, remove na kolekcjach powinny być surowe
    - update - surowy
    - reverse, sort - surowy
    - Axes.plot (itp.) - reaktywne, ale owrapowane w specjalny sposób
- proxy:
  - PROBLEM: wyznaczenie czy forward ma być reaktywny czy nie:
    - może nie być teraz tej metody a w nowym obiekcie może być
    - może być niereaktywna w obecnym obiekcie, a reaktywna w nowym
    - wywołanie dla surowych zmiennych zwróci surową zmienną (chyba, że nie) nawet dla reaktywnych metod
    - może jednak bindowanie zrobić jawnie? @=? jakiś helper? jakieś "a=BIND|a.func" ale co jak mamy wiele odwołań "a.b.c.d(e)" gdzie
    - albo a.BIND.b.BIND.c, np. axes('loss').BIND.get_limits()
    - dla użytkownika: axes(variable_name).plot(data) -
  - trzyma inny obiekt obserwowalny (może być inne proxy)
  - ma wewnętrzny observable box z referencją do innego observabla
  - nie ma własnego __raw__, ale być może forwarduje z wewnętrznego obietku
  - forwarduje wszystkie wywołania do wewnętrznego obiektu
  - forwardowanie ma sens tylko dla getterów (inaczej zmieniamy jakiś obiekt który w każdej chwili może się przełączyć na inny)
  - wołanie sforwardowanych metod:
    - tworzymy callable wrapper z obiektu i atrybutu (reaktywnie zbindowana metoda)
    - wołamy ten  callable wrapper z argumentami (jeśli metoda była reaktywna, to zwróci proxy)
    - jeśli zwrócił proxy, to proxujemy to proxy ;)

- kolekcje powinny informować o zmianie elementów, a poszczególne elementy powinny też być reaktywne, jeśli chcemy śledzić ich stan
- rekursywny unwrap (np. tablica dwuwymiarowa): funkcja biorąca listę wewnątrz rozbija ją na agrumenty, wi

- __notifier__ powiadamia, że __unwrap__ może zwrócić zupełnie co innego niż wczesniej
- __notifier__ nie powiadamia o wewnętrznych zmianach stanu, od tego są obserwowalne wartości zwracane


- pure metoda - taka, która nie ma skutków ubocznych, i wywołana wiele razy z tymi samymi arguemtani zwróci to samo o ile stano obiektu się nie zmienił w międzyczasie
- setter - metoda, która wywoływana wielokrotnie z tymi samymi argumentami ma ten sam efekt co wywołana raz


    -

== terminologia
- observable: ma membera __notifier__()
- wrapper: ma membera __inner__(), może mieć doimplementowane różne metody w sposób specyficzny dla typu obiektu __inner__
- forwarder: implementacja wrappera, która forwarduje wszystkie wywołania do __inner__().target
- inner: helper do pobierania zmiennej,
- target: obiekt, na którym mają być wołane metody, może być równy "raw()", ale nie musi (może odnosić się do innego wrappera)
- raw: surowy obiekt, który powinien być podany do funkcji @reactive
- notifier: helper dla observable, można tam zarejestrować callbacki

- inne propozycje dla helpera: delegate, target, wrapper, box, boxed, inner, reference, provider, proxee?
cechy:
- może trzymać wartość, albo ją obliczać na bieżąco



- notifier: to do czego można podłączać observerów
- inner,
- inner, target

- interfejs do frameworka:
 - czy zmienna jest obserwowalna, tzn czy można sie do niej podłączyć
 - czy zmienną da się odpakować? jaka jest jej surowa wartość? czy jest w trybie błędu?

- interfejs pozostały:
 - set
 - target


== użycie, działanie, uwagi
- pole OBS można przepiąć na inny obiekt, ale trzeba zadbać o przepiecie observerów
- var(x) zwraca Wrapper z SelfContainedValue (a może jakieś hooki zależne od typu trzymanego obiektu)
- reactive wypakowuje Observable, które mają OBS.raw, a podłącza się do wszystkich Observable
- qt_property(obj, prop) zwraca Wrapper z jakimś sensownym Value


observable:
- ma __notifier__

obiekty natywnie obserwowalne:
- observable
- zwracają obiekty obserwowalne gdzie się da (natywnie)

wrapper (abstract):
- observable
- ma raw, exception

proxy:
- observable (podłącza się do proxowanego obiektu)
- val
  - surowy: metody do 'fwd'
  - fwd wrapper: do 'fwd'
  - inne proxy: do 'val'
  - natywny obiekt: do tego obieku
  - ręczny wrapper:

  - metody do 'fwd' dla typu surowego
  - metody odwołują się do 'fwd' dla fwd wrapperów,
  - metody do obiektu (dla natywnego obiektu)


- wrappery zawsze powinny mieć postać klas z samymi metodami i jednym tylko polem (raw)?
- wrappery doczepiane do obiektów? jako pole lub zewn słownik (jeśli się nie da jako pole)?

forwarding wrapper (abstract):
- wrapper
- ma .fwd, które zwraca wrappera, zawierającego automatyczne forwardy

wrapper_provider:
- implementacja wrappera

var:
- forwarding wrapper
- dodatkowo "set"

ręczne wrappery
- jak var, ale mają różne metody ręcznie wydziergane (lub z pomocą helperów)

reactive result
- podobne do var, ale bez seta (albo z inaczej zaimplementowanym)

- unboksu

== dekoratory
- konstrukcja dekoratora: argumenty -> dekorator
- wywołanie dekoratora: funkcja -> udekorowana funkcja
- zawołanie dekorowanej funkcji: args, kwargs -> Binding + call
- update

- dekorator: bierze argumenty do konstruktora,

-

# rekurencyjne Vary:


## atrybuty
- operatory binarne
- operatory z przypisaniem
- append, insert
- call
- remove
- getitem
- setitem
- delitem
- iter
- keys
- values
- items

## problemy


# dane, które chcemy wizualizować/pobierać
- liczba (w jakimś zakresie, z jakimś stepem) - suwak + spin box
- dowolne wyrażenie pythonowe - edit, komórki w tabelce, wieloliniowy edit
- nazwa pliku - edit z guzikiem do okna dialogowego
- dowolny obiekt pythonowy jako drzewko (z możliwością wstawiania nowych elementów do list, wpisywania wyrażeń pythonowych)
- np.ndarray jako tabelka (najlepiej z możliwością wprowadzenia wyrażenia slicującego)
- pandas data table jako tabelka z możliwościa filtrowania i sortowania a także edycji danych
- obrazek jako np.ndarray
- graphviz (w postaci możliwie surowych struktur pythonowych tłumaczonych prawie 1-1 na dota)
- pandas data table oraz np.ndarray jako różne wykresy z matplotlib, a może też pandas i seaborn



= inne
- "repozytorium zmiennych" - jakiś zbiór (drzewo?) nazwanych zmiennych z różnymi właściwościami po których możemy filtrować
  - odbierany strumień z serial porta, potem zramkowany, potem zdekodowany
  - dużo telemetrii wczytanych z plików (dicty?)
  - ceny btc na różnych giełdach -> dużo takich samych tabel
  -
- plot manager - tabelka wykresów:
  - który axis
  - styl (kolor, linia, markery)
  - data_table + kolumny x i y
  - x: min, max, steps (downsampling ad-hoc)
  - wyrażenie (np. data_table['kolumna'])
  -


# var jako parametr czy wartość zwracana?
## za wartością zwracaną
- to jedyne sensowne w przypadku read-only wartości (np. jakaś zewnętrzna mierzona wartość)
- var może trzymać własność różnych rzeczy (i np. znikać z tabelki po zniszczeniu)
- czasem będzie to po prostu opakowane property qtowe

## za parametrem
- to jedyne sensowne w przypadku kontrolek jedynie wyświetlających (np. imshow)
- czasem po prostu mamy wartość i kontrolka może z niej korzystać

Integracja:
Co chcemy osiągnąć:
- możliwość uruchominia jakiejś częściowej aplikacji
- możliwość działania w aplikacji z poziomu jupytera
- możliwość debugowania kodu, idealnie gdyby nawet tego jupyterowego
- wyświetlanie zmiennych np. w pycharmie
- podpowiadanie składni w nowo pisanym kodzie - jupyter to zapewnia


Co umiemy:
- startowanie jupytera z poziomu pythona - wtedy można do odpalić pod debuggerem
- podłączenie się zdalnym debuggerem poprzez gate'a utworzonego wewnątrz kernela (ale darmowy pycharm tego nie ma)

Co można spróbować:
- startowanie aplikacji, która startuje jupytera (tak, że można się podłączyć przeglądarką i coś dopisywać)
- podłączenie konsolką ipythonową do kernela jupyterowego
- plugin do "execute region" (ew. z uwzględnieniem rozdziele


Adaptery itp:
- generator synchroniczny 0->1: np. generator liczb losowych, czytanie danych z pliku
- generator asynchroniczny 0->1: pakiety po udp, czytak z RSa
- uasynchroniczniacz 1->1: bierze generator sync, wypluwa async (z możliwością sleepowania pomiędzy)
- packetizer 1->: czyta dane a generatora async tak długo aż skompletuje paczkę, po czym wypluwa całą paczkę
- demuxer strumienia telemetrycznego 1->* : czyta dane, wypluwa otagowane, klienci używają filtrowanego tee (Var['t1']?)
- merger *->1 : ciągnie dane z wielu generatorów, jest taktowany jednym z nich, wypluwa pakiet zagregowany z danymi ze wszystkich
- muxer *-> : ciągnie kilka strumieni telemetrycznych
- akumulator: bierze generator i wypluwa stan zawierający tablicę wszystkich elementów do początku
- tee: dostaje jeden generator, umożliwia zrobienie dowolnej liczby wyjściowych
- plotter: dostaje miejsce do plotowania i stan do wyplotowania, updatuje plota jak stan się zmienia, zwraca wartość pozwalającą wywalić ten wykres
- downsample: dostaje tablicę (pandas lub array?), zmienne określające zakres i liczbę przedziałów; dla każdego przedziału
    wyznacza wartość zagregowaną przechodnią (min, max, avg, sum, count); może używać piramid...?


- każdy Var może być traktowany jak generator
- opcja: wybrane argumenty jako Var'y
- opcja: wyjście jest generatorem
- opcja: wyjścia jako argumenty

rodzaje:
- reactive - input jako argumenty, output returnem; może być stanowe
- reactive_task - jest uruchamiane w tle i cancelowane przy updacie; outputy dostaje jako parametry, nie tworzy zależności

parametry:
- state - funkcja dostaje przy każdym wywołaniu zmienną w której może przechowywać swój stan
- args_as_vars - lista parametrów (nazwy lub indeksy), które mają być przekazywane jako Var'y (użyteczne głównie przy reactive_task
- ungen_arg -


- strumienie załatwiamy generatorami
  - wiele wyjść: synchroniczne (np. tuple, namedtuple) i niezależne (para wyjście,wartość?)

uwagi:
- funkcja-generator nie wiadomo kiedy zareaguje na wejście, więc nie wiadomo czy wypluje jakąś zmianę w odpowiedzi na zmianę wejścia
  - można to trochę olać i jak już wypluje, to najwyżej przeliczyć trochę za dużo... ale to łamie zasadę o spójności stanu
- jeśli wejście i wyjście jest stanem, to ograniczony sens ma funkcja stanowa (np. generator). Na ogół stan wyjściowy będzie funkcją stanów wejściowych.
- zamiana strumienia w stan ma sens; w drugą stronę niebardzo (i taka transormacja może być stanowa)

- reaktywny generated_var (zmieniający się generator)
- generator liczb losowych
- agregator (generator->zmienna stanowa)
- filtr grupujący
- faktyczne nadawanie priorytetów variablom
- updater powinien gdzieś zapisywać jaki numerek priorytetu jest obecnie odświeżany i nie pozwalać na dostęp do zmiennych o wyższym lub równym numerku (najlepiej czekać aż numerek się zwiększy)
- rysowanie grafu zależności
- integracja z jupyterem

- menu i system komend do konsoli (wpisywanie komend do konsoli z menu)
- ładowanie tablicy z pliku (na razie komenda)
- widget wyświetlanie+filtrowanie
- widget: wszystkie dostępne zmienne by typ
- przemyśleć sygnalizowanie zmian i agregowanie zmian
- wykres z przesuwaniem
- marker czasu przemyśleć
- łączenie bloczków przemyśleć
- joiny tabel
- skakanie do innej tabeli wg. wartości w kolumnie


- liczba zmiennych (1/wiecej)
- stanowość

- 1 zmienna, bezstanowy - funkcja (ale może być opakowana w generator)
- 1 zmienna, stanowy - generator
- wiele zmiennych, bezstanowy - funkcja (po za szczególnymi przypadkami)
- wiele zmiennych, stanowy - funkcja stanowa

- każda zmienna może być brana zarówno jako generator jak i jako ostatnia wartość
- karmiona też
- co jak generator słucha kilku ziomów?
- zmienne mają flagę mówiącą czy tylko ostatni stan ma znaczenie, czy pośrednie też (strumień)
- łapanie wyjątków w każdej zmiennej osobno

=== Cele ===
- żeby to co naklikamy dało się zapisać w postaci skryptu, który robi to samo z danymi (osobno jeszcze kwestia zapisu stanu gui)
- żeby popularne rzeczy dało się wyklikać, ale zobaczyć od razu jak to robić z konsoli
- mieć konsolę z podpowiadaniem, w której się da robić to samo co klikając


=== Pomysły ===

- zapisujemy tylko loga z konsoli użytkownika oraz stan bloczków i aplikacji (np. ułożenie bloczków itp)
- każda komenda w menu wpisuje komendę do konsoli użytkownika, ale może wołać trochę kodu pod maską, żeby ustalić jaką dokładnie komendę wpisać (np. wyświetlać okienko z pytaniem o nazwę pliku)
- istnieją komendy tworzące bloczki poprzez api aplikacji
- bloczki mogą gadać z zewnętrzem tylko poprzez konsolkę użytkownika (tzn. ostatecznie powinny wrzucać tam jakieś komendy), a pozostałe akcje na nich powinny mieć odzwierciedlenie w ich serializowanym stanie
- ? zmienne przez które gadają bloczki są obsługiwane przez api, gdzie jest też możliwość zapisywania się na ich zmiany (całościowe lub bardziej szczegółowo opisane, np. dodanie wiersza danych itp).
- ? bloczki zapisują się na zmiany tych zmiennych i deklarują jakie zmienne chcą modyfikować
- ? każde zadziałanie bloczka wskutek zmiany jego kontrolek (stanu) lub danych wejściowych jest widoczny w konsoli
- komendy "set_var", "{insert/remove/append}_rows"

== Widget do filtrowania i wyświetlania ==
- wybór kolumn do wyświetlania (może prawoklik na kolumnę i możliwość przeciągania?)
- filtrowanie bazowe: warunek w formacie DataFrame.query, który odrzuca wiersze niepasujące
- filtrowanie miękkie: warunek, który wyszarza/folduje wiersze niepasujące
- sortowanie (klik w kolumnę?)
- pola "wtórne", czyli operacja na polach
- wyszukiwanie
- formatowanie (np. podawanie format stringa dla wybranych kolumn)
- możliwość edycji?
- groupby?
- downsampling? po wierszach wg kolejności sortowania? albo wg któregoś pola po dzieleniu i zaokrągleniu?